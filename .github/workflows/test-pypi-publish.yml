name: Test PyPI Publish

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  build-and-test-publish:
    name: Build and Test Publish to TestPyPI
    runs-on: ubuntu-latest
    environment: testpypi  # Optional but recommended for better security
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
      # Needed for PR comments
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools_scm
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package with twine
      run: twine check dist/*
    
    - name: Generate unique version for PR
      id: version
      run: |
        # Get version from package
        VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        # Add PR number and timestamp to make it unique
        PR_VERSION="${VERSION}.dev$(date +%Y%m%d%H%M%S).pr${{ github.event.pull_request.number }}"
        echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
        echo "Generated test version: $PR_VERSION"
    
    - name: Update version for test publishing
      run: |
        # Create a temporary version for TestPyPI
        sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
        # Rebuild with new version
        rm -rf dist/
        python -m build
    
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    
    - name: Wait for TestPyPI availability
      run: |
        echo "Waiting 60 seconds for package to be available on TestPyPI..."
        sleep 60
    
    - name: Test installation from TestPyPI
      run: |
        # Create a fresh virtual environment
        python -m venv test-env
        source test-env/bin/activate
        
        # Try to install from TestPyPI
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ msftoolbox==${{ steps.version.outputs.version }}
        
        # Test import
        python -c "import msftoolbox; print('Successfully imported msftoolbox')"
        
        # Run a basic test
        python -c "
        from msftoolbox.azure import AzureKeyVault
        from msftoolbox.sharepoint import SharepointFiles
        print('Basic imports successful')
        "
        
        deactivate
    
    - name: Comment on PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const outcome = '${{ job.status }}';
          const version = '${{ steps.version.outputs.version }}';
          
          let message = '## ðŸ“¦ TestPyPI Publishing Check\n\n';
          
          if (outcome === 'success') {
            message += '**Success!** Package was successfully published to TestPyPI and installation test passed.\n\n';
            message += `**Test Version**: \`${version}\`\n\n`;
            message += '```bash\n';
            message += `pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ msftoolbox==${version}\n`;
            message += '```';
          } else {
            message += '**Failed!** There was an issue with TestPyPI publishing or installation.\n\n';
            message += 'Please check the workflow logs for more details.';
          }
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('TestPyPI Publishing Check')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: message
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
          }